import { gql } from '@apollo/client'
import { GetStaticProps } from 'next'
import Head from 'next/head'
import Link from 'next/link'
import clsx from 'clsx'
import { useRouter } from 'next/router'
import { useState } from 'react'

import { Content } from '../components/Content'
import { ToggleTheme } from '../components/ToggleTheme'
import { Logo } from '../components/Logo'

import { client } from '../services/client'
import { Icon } from '../components/Icons/@index'

export interface CreatedBy {
  name: string
}

export interface ServerSideDataProps {
  posts: {
    createdBy: CreatedBy
    readingTime: string
    tags: string[]
    title: string
    preview: string
    slug: string
    id: string
  }[]
}

export default function Home({ posts }: ServerSideDataProps) {
  const { route } = useRouter()

  const [menuIsOpen, setMenuIsOpen] = useState(false)

  return (
    <>
      <Head>
        <title>ANDRES - More than {posts.length - 1} posts.</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Content>
        <header className="flex items-center justify-between mt-10 mb-20">
          <Logo />

          <section className="flex flex-row items-center gap-x-10">
            <Link
              href="/"
              className={clsx(
                'hidden sm:flex text-sm hover:text-zinc-900 dark:hover:text-zinc-200',
                {
                  'dark:text-white text-zinc-900': route === '/',
                },
              )}
            >
              CODE
            </Link>

            <Link
              href="/work"
              className={clsx(
                'hidden sm:flex text-sm hover:text-zinc-900 dark:hover:text-zinc-200',
                {
                  'text-zinc-900': route === '/work',
                },
              )}
            >
              WORK
            </Link>

            <Link
              href="/learning"
              className={clsx(
                'hidden sm:flex text-sm hover:text-zinc-900 dark:hover:text-zinc-200',
                {
                  'text-zinc-900': route === '/work',
                },
              )}
            >
              WHAT AM I STUDYING?
            </Link>

            <ToggleTheme />
          </section>
        </header>

        <ul className="grid grid-cols-1 gap-y-10 sm:gap-y-0 sm:grid-cols-2 sm:gap-5">
          {posts.map((post) => (
            <li key={post.id} className="before:content-['']">
              <Link href={encodeURI(`post/${post.slug}`)}>
                <h5 className="text-2xl font-light tracking-tight">
                  {post.title}
                </h5>

                <section className="flex items-center mt-5">
                  {post.tags.map((item) => (
                    <span
                      key={item}
                      className="first:rounded-l-lg last:border-none border-r dark:border-zinc-700/50 last:rounded-r-lg text-xs py-2 px-4 dark:bg-neutral-800 bg-zinc-100"
                    >
                      {item}
                    </span>
                  ))}
                </section>
              </Link>
            </li>
          ))}
        </ul>

        <button
          className="flex items-center justify-center sm:hidden h-10 w-10 rounded-full left-1/2 -translate-x-1/2 fixed bottom-10 bg-zinc-800 z-50"
          onClick={() => setMenuIsOpen((prev) => !prev)}
        >
          <Icon.DotsTree />
        </button>

        <section
          className={clsx(
            'absolute right-0 left-0 w-screen transition-[height] duration-300 flex flex-col items-center justify-center gap-y-10 bg-zinc-900',
            {
              'bottom-0 h-screen': menuIsOpen,
              'top-0 h-0': !menuIsOpen,
            },
          )}
        >
          {menuIsOpen && (
            <>
              <Link
                href="/"
                className={clsx(
                  'flex text-sm hover:text-zinc-900 dark:hover:text-zinc-200',
                  {
                    'dark:text-white text-zinc-900': route === '/',
                  },
                )}
              >
                CODE
              </Link>

              <Link
                href="/work"
                className={clsx(
                  'flex text-sm hover:text-zinc-900 dark:hover:text-zinc-200',
                  {
                    'text-zinc-900': route === '/work',
                  },
                )}
              >
                WORK
              </Link>

              <Link
                href="/learning"
                className={clsx(
                  'flex text-sm hover:text-zinc-900 dark:hover:text-zinc-200',
                  {
                    'text-zinc-900': route === '/work',
                  },
                )}
              >
                WHAT AM I STUDYING?
              </Link>
            </>
          )}
        </section>
      </Content>
    </>
  )
}

export const getStaticProps: GetStaticProps = async () => {
  const response = await client
    .query({
      query: gql`
        query GetAllPosts {
          posts {
            createdBy {
              name
            }
            readingTime
            tags
            title
            preview
            slug
            id
          }
        }
      `,
    })
    .then((res) => {
      console.log(res)
      return res
    })
    .catch((err) => {
      console.log(err, 'error on your side')
      return err
    })

  return {
    props: response ? response.data : {},
  }
}
